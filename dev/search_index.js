var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProconIO","category":"page"},{"location":"#ProconIO","page":"Home","title":"ProconIO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Inspired by proconio-rs, I wrote this package to handle inputs for competitive programming contests.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProconIO]","category":"page"},{"location":"#ProconIO.@input-Tuple{Any}","page":"Home","title":"ProconIO.@input","text":"The usage is similar to proconio-rs. You need to specify the variable name and its structure.\n\n@input a = Int\n\nMultiple variables need to be nested in a block.\n\n@input begin\n    a = Char\n    b = Float32\n    c = (Int, Char)\n    d = String\n    e = Bool\nend\n\nArrays need to be specified in the form of [type; shape].\n\n@input begin\n    a = [Int; 3]\n    b = [Float32; (2, 3)]\nend\n\nComplex structures can also be handled.\n\n@input a = [(Int, [Int; (2, 2)], Char); (2, 2)]\n\n\n\n\n\n","category":"macro"}]
}
